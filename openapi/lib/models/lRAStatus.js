/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Class representing a LRAStatus.
 */
class LRAStatus {
  /**
   * Create a LRAStatus.
   * @property {string} [lraId]
   * @property {string} [clientId]
   * @property {number} [httpStatus]
   * @property {string} [responseData]
   * @property {number} [startTime]
   * @property {number} [finishTime]
   * @property {number} [timeNow]
   * @property {string} [status] Possible values include: 'Compensating',
   * 'Compensated', 'FailedToCompensate', 'Completing', 'Completed',
   * 'FailedToComplete'
   * @property {boolean} [compensated]
   * @property {boolean} [recovering]
   * @property {boolean} [compensating]
   * @property {boolean} [failedToCompensate]
   * @property {boolean} [failedToComplete]
   * @property {boolean} [completing]
   * @property {string} [encodedResponseData]
   * @property {boolean} [complete]
   * @property {boolean} [topLevel]
   * @property {boolean} [completed]
   * @property {boolean} [active]
   */
  constructor() {
  }

  /**
   * Defines the metadata of LRAStatus
   *
   * @returns {object} metadata of LRAStatus
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'LRAStatus',
      type: {
        name: 'Composite',
        className: 'LRAStatus',
        modelProperties: {
          lraId: {
            required: false,
            serializedName: 'lraId',
            type: {
              name: 'String'
            }
          },
          clientId: {
            required: false,
            serializedName: 'clientId',
            type: {
              name: 'String'
            }
          },
          httpStatus: {
            required: false,
            serializedName: 'httpStatus',
            type: {
              name: 'Number'
            }
          },
          responseData: {
            required: false,
            serializedName: 'responseData',
            type: {
              name: 'String'
            }
          },
          startTime: {
            required: false,
            serializedName: 'startTime',
            type: {
              name: 'Number'
            }
          },
          finishTime: {
            required: false,
            serializedName: 'finishTime',
            type: {
              name: 'Number'
            }
          },
          timeNow: {
            required: false,
            serializedName: 'timeNow',
            type: {
              name: 'Number'
            }
          },
          status: {
            required: false,
            serializedName: 'status',
            type: {
              name: 'String'
            }
          },
          compensated: {
            required: false,
            serializedName: 'compensated',
            type: {
              name: 'Boolean'
            }
          },
          recovering: {
            required: false,
            serializedName: 'recovering',
            type: {
              name: 'Boolean'
            }
          },
          compensating: {
            required: false,
            serializedName: 'compensating',
            type: {
              name: 'Boolean'
            }
          },
          failedToCompensate: {
            required: false,
            serializedName: 'failedToCompensate',
            type: {
              name: 'Boolean'
            }
          },
          failedToComplete: {
            required: false,
            serializedName: 'failedToComplete',
            type: {
              name: 'Boolean'
            }
          },
          completing: {
            required: false,
            serializedName: 'completing',
            type: {
              name: 'Boolean'
            }
          },
          encodedResponseData: {
            required: false,
            serializedName: 'encodedResponseData',
            type: {
              name: 'String'
            }
          },
          complete: {
            required: false,
            serializedName: 'complete',
            type: {
              name: 'Boolean'
            }
          },
          topLevel: {
            required: false,
            serializedName: 'topLevel',
            type: {
              name: 'Boolean'
            }
          },
          completed: {
            required: false,
            serializedName: 'completed',
            type: {
              name: 'Boolean'
            }
          },
          active: {
            required: false,
            serializedName: 'active',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = LRAStatus;
