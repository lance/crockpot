/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from "./models";

export default class MicroprofileLra extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the MicroprofileLra class.
   * @constructor
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(baseUri?: string, options?: ServiceClientOptions);


  /**
   * @summary Indicates whether an LRA is active
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  isActiveLRAWithHttpOperationResponse(lraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Indicates whether an LRA is active
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  isActiveLRA(lraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  isActiveLRA(lraId: string, callback: ServiceCallback<void>): void;
  isActiveLRA(lraId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Start a new LRA
   *
   * The LRA model uses a presumed nothing protocol: the coordinator must
   * communicate
   * with Compensators in order to inform them of the LRA activity. Every time a
   * Compensator is enrolled with a LRA, the coordinator must make information
   * about
   * it durable so that the Compensator can be contacted when the LRA terminates,
   * even in the event of subsequent failures. Compensators, clients and
   * coordinators
   * cannot make any presumption about the state of the global transaction
   * without
   * consulting the coordinator and all compensators, respectively.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.clientID] Each client is expected to have a unique
   * identity (which can be a URL).
   *
   * @param {number} [options.timeLimit] Specifies the maximum time in milli
   * seconds that the LRA will exist for.
   * If the LRA is terminated because of a timeout, the LRA URL is deleted.
   * All further invocations on the URL will return 404.
   * The invoker can assume this was equivalent to a compensate operation.
   *
   * @param {string} [options.parentLRA] The enclosing LRA if this new LRA is
   * nested
   *
   * @param {string} [options.longRunningAction]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  startLRAWithHttpOperationResponse(options?: { clientID? : string, timeLimit? : number, parentLRA? : string, longRunningAction? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Start a new LRA
   *
   * The LRA model uses a presumed nothing protocol: the coordinator must
   * communicate
   * with Compensators in order to inform them of the LRA activity. Every time a
   * Compensator is enrolled with a LRA, the coordinator must make information
   * about
   * it durable so that the Compensator can be contacted when the LRA terminates,
   * even in the event of subsequent failures. Compensators, clients and
   * coordinators
   * cannot make any presumption about the state of the global transaction
   * without
   * consulting the coordinator and all compensators, respectively.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.clientID] Each client is expected to have a unique
   * identity (which can be a URL).
   *
   * @param {number} [options.timeLimit] Specifies the maximum time in milli
   * seconds that the LRA will exist for.
   * If the LRA is terminated because of a timeout, the LRA URL is deleted.
   * All further invocations on the URL will return 404.
   * The invoker can assume this was equivalent to a compensate operation.
   *
   * @param {string} [options.parentLRA] The enclosing LRA if this new LRA is
   * nested
   *
   * @param {string} [options.longRunningAction]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  startLRA(options?: { clientID? : string, timeLimit? : number, parentLRA? : string, longRunningAction? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  startLRA(callback: ServiceCallback<void>): void;
  startLRA(options: { clientID? : string, timeLimit? : number, parentLRA? : string, longRunningAction? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Update the TimeLimit for an existing LRA
   *
   * LRAs can be automatically cancelled if they aren't closed or cancelled
   * before the TimeLimit
   * specified at creation time is reached.
   * The time limit can be updated.
   *
   *
   * @param {number} timeLimit The new time limit for the LRA
   *
   * @param {string} lraId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  renewTimeLimitWithHttpOperationResponse(timeLimit: number, lraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update the TimeLimit for an existing LRA
   *
   * LRAs can be automatically cancelled if they aren't closed or cancelled
   * before the TimeLimit
   * specified at creation time is reached.
   * The time limit can be updated.
   *
   *
   * @param {number} timeLimit The new time limit for the LRA
   *
   * @param {string} lraId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  renewTimeLimit(timeLimit: number, lraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  renewTimeLimit(timeLimit: number, lraId: string, callback: ServiceCallback<void>): void;
  renewTimeLimit(timeLimit: number, lraId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @param {string} nestedLraId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getNestedLRAStatusWithHttpOperationResponse(nestedLraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @param {string} nestedLraId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getNestedLRAStatus(nestedLraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  getNestedLRAStatus(nestedLraId: string, callback: ServiceCallback<void>): void;
  getNestedLRAStatus(nestedLraId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @param {string} nestedLraId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  completeNestedLRAWithHttpOperationResponse(nestedLraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @param {string} nestedLraId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  completeNestedLRA(nestedLraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  completeNestedLRA(nestedLraId: string, callback: ServiceCallback<void>): void;
  completeNestedLRA(nestedLraId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @param {string} nestedLraId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  compensateNestedLRAWithHttpOperationResponse(nestedLraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @param {string} nestedLraId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  compensateNestedLRA(nestedLraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  compensateNestedLRA(nestedLraId: string, callback: ServiceCallback<void>): void;
  compensateNestedLRA(nestedLraId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @param {string} nestedLraId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  forgetNestedLRAWithHttpOperationResponse(nestedLraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @param {string} nestedLraId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  forgetNestedLRA(nestedLraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  forgetNestedLRA(nestedLraId: string, callback: ServiceCallback<void>): void;
  forgetNestedLRA(nestedLraId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Attempt to close an LRA
   *
   * Trigger the successful completion of the LRA. All compensators will be
   * dropped by the coordinator. The complete message will be sent to the
   * compensators. Upon termination, the URL is implicitly deleted. The invoker
   * cannot know for sure whether the lra completed or compensated without
   * enlisting a participant.
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  closeLRAWithHttpOperationResponse(lraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Attempt to close an LRA
   *
   * Trigger the successful completion of the LRA. All compensators will be
   * dropped by the coordinator. The complete message will be sent to the
   * compensators. Upon termination, the URL is implicitly deleted. The invoker
   * cannot know for sure whether the lra completed or compensated without
   * enlisting a participant.
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  closeLRA(lraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  closeLRA(lraId: string, callback: ServiceCallback<void>): void;
  closeLRA(lraId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Attempt to cancel an LRA
   *
   * Trigger the compensation of the LRA. All compensators will be triggered by
   * the coordinator (ie the compensate message will be sent to each
   * compensators). Upon termination, the URL is implicitly deleted. The invoker
   * cannot know for sure whether the lra completed or compensated without
   * enlisting a participant.
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  cancelLRAWithHttpOperationResponse(lraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Attempt to cancel an LRA
   *
   * Trigger the compensation of the LRA. All compensators will be triggered by
   * the coordinator (ie the compensate message will be sent to each
   * compensators). Upon termination, the URL is implicitly deleted. The invoker
   * cannot know for sure whether the lra completed or compensated without
   * enlisting a participant.
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  cancelLRA(lraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  cancelLRA(lraId: string, callback: ServiceCallback<void>): void;
  cancelLRA(lraId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Returns all LRAs
   *
   * Gets both active and recovering LRAs
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.status] Filter the returned LRAs to only those in
   * the give state (see CompensatorStatus)
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllLRAsWithHttpOperationResponse(options?: { status? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.LRAInfo[]>>;

  /**
   * @summary Returns all LRAs
   *
   * Gets both active and recovering LRAs
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.status] Filter the returned LRAs to only those in
   * the give state (see CompensatorStatus)
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllLRAs(options?: { status? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.LRAInfo[]>;
  getAllLRAs(callback: ServiceCallback<models.LRAInfo[]>): void;
  getAllLRAs(options: { status? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.LRAInfo[]>): void;


  /**
   * @summary Obtain the status of an LRA as a string
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getLRAStatusWithHttpOperationResponse(lraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Obtain the status of an LRA as a string
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getLRAStatus(lraId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  getLRAStatus(lraId: string, callback: ServiceCallback<void>): void;
  getLRAStatus(lraId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary A Compensator can join with the LRA at any time prior to the
   * completion of an activity
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {number} timeLimit The time limit (in seconds) that the Compensator
   * can guarantee that it can compensate the work performed by the service.
   * After this time period has elapsed, it may no longer be possible to undo the
   * work within the scope of this (or any enclosing) LRA. It may therefore be
   * necessary for the application or service to start other activities to
   * explicitly try to compensate this work. The application or coordinator may
   * use this information to control the lifecycle of a LRA.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.link] The resource paths that the coordinator will
   * use to complete or compensate and to request the status of the participant.
   * The link rel names are complete, compensate and status.
   *
   * @param {string} [options.body] opaque data that will be stored with the
   * coordinator and passed back to
   * the participant when the LRA is closed or cancelled.
   *
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  joinLRAViaBodyWithHttpOperationResponse(lraId: string, timeLimit: number, options?: { link? : string, body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary A Compensator can join with the LRA at any time prior to the
   * completion of an activity
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {number} timeLimit The time limit (in seconds) that the Compensator
   * can guarantee that it can compensate the work performed by the service.
   * After this time period has elapsed, it may no longer be possible to undo the
   * work within the scope of this (or any enclosing) LRA. It may therefore be
   * necessary for the application or service to start other activities to
   * explicitly try to compensate this work. The application or coordinator may
   * use this information to control the lifecycle of a LRA.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.link] The resource paths that the coordinator will
   * use to complete or compensate and to request the status of the participant.
   * The link rel names are complete, compensate and status.
   *
   * @param {string} [options.body] opaque data that will be stored with the
   * coordinator and passed back to
   * the participant when the LRA is closed or cancelled.
   *
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  joinLRAViaBody(lraId: string, timeLimit: number, options?: { link? : string, body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  joinLRAViaBody(lraId: string, timeLimit: number, callback: ServiceCallback<void>): void;
  joinLRAViaBody(lraId: string, timeLimit: number, options: { link? : string, body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary A Compensator can resign from the LRA at any time prior to the
   * completion of an activity
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  leaveLRAWithHttpOperationResponse(lraId: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary A Compensator can resign from the LRA at any time prior to the
   * completion of an activity
   *
   * @param {string} lraId The unique identifier of the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  leaveLRA(lraId: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  leaveLRA(lraId: string, callback: ServiceCallback<void>): void;
  leaveLRA(lraId: string, options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary List recovering Long Running Actions
   *
   * Returns LRAs that are recovering (ie some compensators still need to be ran)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getRecoveringLRAsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary List recovering Long Running Actions
   *
   * Returns LRAs that are recovering (ie some compensators still need to be ran)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getRecoveringLRAs(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  getRecoveringLRAs(callback: ServiceCallback<void>): void;
  getRecoveringLRAs(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Lookup the participant URL
   *
   * Performing a GET on the recovery URL (returned from a join request) will
   * return the original participant URL(s)
   *
   * @param {string} lRAId Identifies the LRAId that the participant joined
   *
   * @param {string} recCoordId An identifier that was returned by the
   * coordinator when a participant joined the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getCompensatorWithHttpOperationResponse(lRAId: string, recCoordId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Lookup the participant URL
   *
   * Performing a GET on the recovery URL (returned from a join request) will
   * return the original participant URL(s)
   *
   * @param {string} lRAId Identifies the LRAId that the participant joined
   *
   * @param {string} recCoordId An identifier that was returned by the
   * coordinator when a participant joined the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getCompensator(lRAId: string, recCoordId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  getCompensator(lRAId: string, recCoordId: string, callback: ServiceCallback<void>): void;
  getCompensator(lRAId: string, recCoordId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Update the endpoint that a participant is prepared to accept
   * requests on.
   *
   * Performing a PUT on the recovery URL will overwrite the old <compensor URL>
   * with the new one supplied and return the old url. The old value is
   * returned.The full URL was returned when the participant first joined the
   * LRA.
   *
   * @param {string} lRAId Identifies the LRAId that the participant joined
   *
   * @param {string} recCoordId An identifier that was returned by the
   * coordinator when a participant joined the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  replaceCompensatorWithHttpOperationResponse(lRAId: string, recCoordId: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update the endpoint that a participant is prepared to accept
   * requests on.
   *
   * Performing a PUT on the recovery URL will overwrite the old <compensor URL>
   * with the new one supplied and return the old url. The old value is
   * returned.The full URL was returned when the participant first joined the
   * LRA.
   *
   * @param {string} lRAId Identifies the LRAId that the participant joined
   *
   * @param {string} recCoordId An identifier that was returned by the
   * coordinator when a participant joined the LRA
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body]
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  replaceCompensator(lRAId: string, recCoordId: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  replaceCompensator(lRAId: string, recCoordId: string, callback: ServiceCallback<void>): void;
  replaceCompensator(lRAId: string, recCoordId: string, options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

export { MicroprofileLra, models as MicroprofileLraModels };
